/*******************************************************************************
 * This file is part of the Polyglot extensible compiler framework.
 *
 * Copyright (c) 2000-2012 Polyglot project group, Cornell University
 * Copyright (c) 2006-2012 IBM Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * This program and the accompanying materials are made available under
 * the terms of the Lesser GNU Public License v2.0 which accompanies this
 * distribution.
 *
 * The development of the Polyglot project has been supported by a
 * number of funding sources, including DARPA Contract F30602-99-1-0533,
 * monitored by USAF Rome Laboratory, ONR Grants N00014-01-1-0968 and
 * N00014-09-1-0652, NSF Grants CNS-0208642, CNS-0430161, CCF-0133302,
 * and CCF-1054172, AFRL Contract FA8650-10-C-7022, an Alfred P. Sloan
 * Research Fellowship, and an Intel Research Ph.D. Fellowship.
 *
 * See README for contributors.
 ******************************************************************************/
// Assumes polyglot.jar is in classpath
include "polyglot/ext/jl7/parse/jl7.ppg"

package polyglot.ext.jl8.parse;

import polyglot.ext.jl7.parse.*;
import polyglot.ext.jl8.ast.*;
import polyglot.ext.jl8.types.*;


parser Grm extends polyglot.ext.jl7.parse.Grm  {:
	public final JL8TypeSystem ts;
	public final JL8NodeFactory nf;

	public static final List<TypeNode> diamond = new LinkedList<>();

	public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
		super(l, t, n, q);
		ts = (JL8TypeSystem) t;
		nf = (JL8NodeFactory) n;
	}

:};

nonterminal lambda_expression;
nonterminal inferred_formal_parameter_list;
nonterminal lambda_body;

terminal token ARROW;
terminal token RPAREN_ARROW;

start with goal;

extend expression_nn ::= lambda_expression;

lambda_expression ::=
      simple_name ARROW lambda_body
    | LPAREN RPAREN ARROW lambda_body
    | LPAREN inferred_formal_parameter_list RPAREN_ARROW lambda_body
    ;

inferred_formal_parameter_list ::=
      simple_name
    | inferred_formal_parameter_list COMMA simple_name
    ;

lambda_body ::=
      expression
    | block
    ;
