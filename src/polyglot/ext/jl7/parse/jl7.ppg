/*******************************************************************************
 * This file is part of the Polyglot extensible compiler framework.
 *
 * Copyright (c) 2000-2012 Polyglot project group, Cornell University
 * Copyright (c) 2006-2012 IBM Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * This program and the accompanying materials are made available under
 * the terms of the Lesser GNU Public License v2.0 which accompanies this
 * distribution.
 *
 * The development of the Polyglot project has been supported by a
 * number of funding sources, including DARPA Contract F30602-99-1-0533,
 * monitored by USAF Rome Laboratory, ONR Grants N00014-01-1-0968 and
 * N00014-09-1-0652, NSF Grants CNS-0208642, CNS-0430161, CCF-0133302,
 * and CCF-1054172, AFRL Contract FA8650-10-C-7022, an Alfred P. Sloan
 * Research Fellowship, and an Intel Research Ph.D. Fellowship.
 *
 * See README for contributors.
 ******************************************************************************/
// Assumes polyglot.jar is in classpath
include "polyglot/ext/jl5/parse/jl5.ppg"

package polyglot.ext.jl7.parse;

import polyglot.ext.jl5.parse.*;
import polyglot.ext.jl7.ast.*;


parser Grm extends polyglot.ext.jl5.parse.Grm  {:
	public final polyglot.ext.jl7.types.JL7TypeSystem ts;
	public final JL7NodeFactory nf;

	public static final List<TypeNode> diamond = new LinkedList<>();

	public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
		super(l, t, n, q);
		ts = (polyglot.ext.jl7.types.JL7TypeSystem) t;
		nf = (JL7NodeFactory) n;
	}

:};

non terminal semicolon_opt;
non terminal TryWithResources try_with_resources_statement;
non terminal List<LocalDecl> resources;
non terminal LocalDecl resource;
non terminal List<TypeNode> catch_type;
non terminal Block finally_opt;

start with goal;

extend try_statement ::=
	try_with_resources_statement:a {:
		RESULT = a;
	:}
;

semicolon_opt ::= | SEMICOLON;

try_with_resources_statement ::=
	TRY:a LPAREN resources:b semicolon_opt RPAREN:r block:c catches_opt:d finally_opt:e {:
		RESULT = parser.nf.TryWithResources(parser.pos(a, e != null ? e : !d.isEmpty() ? d : r),
																				b, c, d, e);
	:}
;

resources ::=
	resource:a {:
		List<LocalDecl> l = new LinkedList<>();
		l.add(a);
		RESULT = l;
	:}
	| resources:a SEMICOLON resource:c {:
		a.add(c);
		RESULT = a;
	:}
;

resource ::=
	modifiers_or_annotations_opt:a type:b variable_declarator_id:c EQ expression:d {:
		RESULT = parser.nf.Resource(parser.pos(c), a.flags(), a.annotations(),
																parser.array(b, c.dims), c.name, d);
	:}
;

finally_opt ::=
	| finally:a {: RESULT = a; :}
;

override catch_clause ::=
	// Catch
	CATCH:n LPAREN modifiers_or_annotations_opt:a catch_type:b IDENTIFIER:c RPAREN block:d {:
		Formal f = parser.nf.Formal(parser.pos(b, c, c), a.flags(), a.annotations(),
																parser.nf.AmbUnionType(parser.pos(b), b),
																parser.nf.Id(parser.pos(c), c.getIdentifier()));
		if (b.size() > 1)
			RESULT = parser.nf.MultiCatch(parser.pos(n, d), f, b, d);
		else
			RESULT = parser.nf.Catch(parser.pos(n, d), f, d);
	:}
;

catch_type ::=
	name:a {:
		List<TypeNode> l = new LinkedList<>();
		l.add(a.toType());
		RESULT = l;
	:}
	| catch_type:as OR name:a {:
		as.add(a.toType());
		RESULT = as;
	:}
;

extend class_instance_creation_expression ::=
	NEW:a class_or_interface:b LT GT:d LPAREN argument_list_opt:f RPAREN class_body_opt:h {:
		RESULT = parser.nf.New(parser.pos(a), parser.nf.AmbDiamondTypeNode(parser.pos(b, d), b), f, h);
	:}
	| NEW:a type_arguments:b class_or_interface:c LT GT:e LPAREN argument_list_opt:g RPAREN class_body_opt:i
			/* Instantiating type arguments */ {:
		RESULT = parser.nf.New(parser.pos(a), b, parser.nf.AmbDiamondTypeNode(parser.pos(c, e), c), g, i);
	:}
	| primary:a DOT NEW type_arguments_opt:d IDENTIFIER:e LT GT:g LPAREN argument_list_opt:i RPAREN class_body_opt:k
			/* Instantiating type arguments */ {:
		TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
		RESULT = parser.nf.New(parser.pos(a), a, d, parser.nf.AmbDiamondTypeNode(parser.pos(e, g), aa), i, k);
	:}
	| name:a DOT NEW type_arguments_opt:d IDENTIFIER:e LT GT:g LPAREN argument_list_opt:i RPAREN class_body_opt:k
			/* Instantiating type arguments */ {:
		TypeNode aa = (new JL5Name(parser.nf, parser.ts, parser.pos(e), parser.nf.Id(parser.pos(e), e.getIdentifier()))).toType();
		RESULT = parser.nf.New(parser.pos(a), a.toExpr(), d, parser.nf.AmbDiamondTypeNode(parser.pos(e, g), aa), i, k);
	:}
;
